/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package my.dinnermenu2;

import java.awt.Component;
import java.awt.Dimension;
import java.awt.Image;
import java.awt.Toolkit;
import java.util.ArrayList;
import java.util.Collections;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;

/**
 *
 * @author ajswe
 */
public class EnterIngredients extends javax.swing.JFrame {

    private static Component popup;
    /**
     * Creates new form EnterIngredients
     * @param menu
     * @param settings
     */
    public EnterIngredients(ArrayList<Meal> menu,Settings settings) {
        setDefaultCloseOperation(EnterIngredients.EXIT_ON_CLOSE);
        try {
            Image image = new ImageIcon("icon.png").getImage();
            this.setIconImage(image);
        } catch(Exception ex){
            JOptionPane.showMessageDialog(popup, "Application icon not found!");
        }
        initComponents();
        this.setTitle("Dinner Menu");
        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
        this.setLocation(dim.width/2-this.getSize().width/2, dim.height/2-this.getSize().height/2);
        setResizable(false);
        
        //Initialize variables
        this.settings = settings;
        this.menu = menu;
        ingredients_for_use = new ArrayList<>();
        ingredient_display.setEditable(false);
        ingredient_name.requestFocus();
        
        ingredients_for_count = new ArrayList<>();
        for(int i = 0; i < menu.size(); i++) {
            Meal meal = menu.get(i);
            ArrayList<Ingredient> ingredients = meal.ingredients;
            for(int j = 0; j < ingredients.size(); j++) {
                ingredients_for_count.add(ingredients.get(j).get_name());
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        ingredient_display = new javax.swing.JTextArea();
        ingredient_name = new javax.swing.JTextField();
        ingredient_name_label = new javax.swing.JLabel();
        add_ingredient = new javax.swing.JButton();
        remove_ingredient = new javax.swing.JButton();
        continue_forward = new javax.swing.JButton();
        meal_count_spinner = new javax.swing.JSpinner();
        meal_count_label = new javax.swing.JLabel();

        ingredient_display.setColumns(20);
        ingredient_display.setRows(5);
        jScrollPane1.setViewportView(ingredient_display);

        ingredient_name.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                ingredient_nameKeyReleased(evt);
            }
        });

        ingredient_name_label.setText("Ingredient");

        add_ingredient.setText("Add");
        add_ingredient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                add_ingredientActionPerformed(evt);
            }
        });

        remove_ingredient.setText("Remove");
        remove_ingredient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                remove_ingredientActionPerformed(evt);
            }
        });

        continue_forward.setText("Continue");
        continue_forward.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                continue_forwardActionPerformed(evt);
            }
        });

        meal_count_spinner.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(1), Integer.valueOf(1), null, Integer.valueOf(1)));

        meal_count_label.setForeground(new java.awt.Color(200, 200, 200));
        meal_count_label.setText(" ");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 311, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(ingredient_name_label)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ingredient_name)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(meal_count_spinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(meal_count_label)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(add_ingredient)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(remove_ingredient)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(continue_forward)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ingredient_name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ingredient_name_label)
                    .addComponent(meal_count_spinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(add_ingredient)
                    .addComponent(remove_ingredient)
                    .addComponent(continue_forward))
                .addGap(10, 10, 10)
                .addComponent(meal_count_label)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void continue_forwardActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_continue_forwardActionPerformed
        dispose();
        MenuConfig next_window;
        next_window = new MenuConfig(menu,settings,ingredients_for_use);
        next_window.setVisible(true);
    }//GEN-LAST:event_continue_forwardActionPerformed

    private void add_ingredientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_add_ingredientActionPerformed
        if (ingredient_name.getText().equals("")) {
            return;
        }
        for(int i = 0; i < (Integer)meal_count_spinner.getValue(); i++) {
            ingredients_for_use.add(ingredient_name.getText().toLowerCase());
        }
        String to_display = "";
        for (int i = 0; i < ingredients_for_use.size(); i++) {
            if(!to_display.contains(ingredients_for_use.get(i))) {
                to_display += ingredients_for_use.get(i) + "\n";
            }
        }
        ingredient_display.setText(to_display);
        ingredient_name.setText("");
        meal_count_label.setText("");
        ingredient_name.requestFocus();
    }//GEN-LAST:event_add_ingredientActionPerformed

    private void remove_ingredientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_remove_ingredientActionPerformed
        if (ingredient_name.getText().equals("")) {
            return;
        }
        if (ingredients_for_use.contains(ingredient_name.getText().toLowerCase())) {
            boolean not_removed = true;
            while(not_removed) {
                not_removed = ingredients_for_use.remove(ingredient_name.getText().toLowerCase());
            }
            String to_display = "";
            for (int i = 0; i < ingredients_for_use.size(); i++) {
                to_display += ingredients_for_use.get(i) + "\n";
            }
            ingredient_display.setText(to_display);
            ingredient_name.setText("");
        }
    }//GEN-LAST:event_remove_ingredientActionPerformed

    private void ingredient_nameKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_ingredient_nameKeyReleased
        //Creates small grey text on bottom of display, showing number of meals that
        //contain that ingredient
        if (ingredient_name.getText().isEmpty()) {
            meal_count_label.setText("");
            return;
        }
        String partial_ingredient = ingredient_name.getText();
        //Set a limit so avoid messing up the window
        if(partial_ingredient.length() > 25) {
            partial_ingredient = partial_ingredient.substring(0, 25);
        }

        int number_of_meals_containing_partial = 0;
        String exact_word_match_regex = "\\b" + partial_ingredient.toLowerCase() + "\\b";
        Pattern p = Pattern.compile(exact_word_match_regex);
        for (int i = 0; i < ingredients_for_count.size(); i++) {
            //Search for regex
            Matcher m = p.matcher(ingredients_for_count.get(i).toLowerCase());

            if (m.find()) {
                number_of_meals_containing_partial++;
            }
        }
        
        meal_count_label.setText("Number of meals that contain " + partial_ingredient
                + ": " + number_of_meals_containing_partial);
    }//GEN-LAST:event_ingredient_nameKeyReleased



    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton add_ingredient;
    private javax.swing.JButton continue_forward;
    private javax.swing.JTextArea ingredient_display;
    private javax.swing.JTextField ingredient_name;
    private javax.swing.JLabel ingredient_name_label;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel meal_count_label;
    private javax.swing.JSpinner meal_count_spinner;
    private javax.swing.JButton remove_ingredient;
    // End of variables declaration//GEN-END:variables
    private ArrayList<String> ingredients_for_use;
    private final Settings settings;
    private ArrayList<Meal> menu;
    private ArrayList<String> ingredients_for_count;
}
