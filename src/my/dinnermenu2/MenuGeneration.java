/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package my.dinnermenu2;

import java.awt.Component;
import java.awt.Dimension;
import java.awt.Image;
import java.awt.Toolkit;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;

/**
 *
 * @author ajswe
 */
public class MenuGeneration extends javax.swing.JFrame {

    private static Component popup;
    /**
     * Creates new form MenuGeneration
     * @param menu
     * @param settings
     * @param eatout_meals
     * @param large_meals
     * @param quick_meals
     * @param special_meals
     * @param fast_sunday
     * @param ingredients
     */
    public MenuGeneration(ArrayList<Meal> menu, Settings settings, boolean[] eatout_meals, boolean[] quick_meals, boolean[] special_meals, boolean[] large_meals, boolean fast_sunday, ArrayList<String> ingredients) {
        setDefaultCloseOperation(MenuConfig.EXIT_ON_CLOSE);
        try {
            Image image = new ImageIcon("icon.png").getImage();
            this.setIconImage(image);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(popup, "Application icon not found!");
        }
        initComponents();
        this.setTitle("Dinner Menu");
        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
        this.setLocation(dim.width / 2 - this.getSize().width / 2, dim.height / 2 - this.getSize().height / 2);
        setResizable(false);
        
        //Set up window components
        meal_combobox.removeAllItems();
        for(int i = 0; i < menu.size(); i++) {
            meal_combobox.addItem(menu.get(i).name);
        }
        meal_combobox.setSelectedIndex(0);
        
        //Initial Variables
        this.settings = settings;
        this.combine_fast_sunday_meals = settings.get_unsol_fast_sunday();
        this.combine_large_meals = settings.get_unsol_large();
        this.combine_quick_meals = settings.get_unsol_quick();
        this.combine_special_meals = settings.get_unsol_special();
        this.menu = menu;
        this.backup_menu = new ArrayList<>();
        this.backup_menu.addAll(menu);
        this.eatout_meals = eatout_meals;
        this.large_meals = large_meals;
        this.quick_meals = quick_meals;
        this.special_meals = special_meals;
        this.fast_sunday = fast_sunday;
        this.ingredients_to_use = ingredients;
        this.backup_ingredients_to_use = new ArrayList<>();
        if (ingredients != null) {
            this.backup_ingredients_to_use.addAll(ingredients);
        }
        this.weekly_ingredients = new ArrayList<>();
        this.ingredients_menu = new ArrayList<>();
        this.week = new ArrayList<>();
        
        generate_menu();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        menu_table = new javax.swing.JTable();
        new_menu_button = new javax.swing.JButton();
        swap_days_button = new javax.swing.JButton();
        change_one_meal_button = new javax.swing.JButton();
        email_ingredients_button = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        ingredients_list = new javax.swing.JTextArea();
        ingredients_label = new javax.swing.JLabel();
        main_menu_button = new javax.swing.JButton();
        view_as_list_button = new javax.swing.JButton();
        view_as_meals_button = new javax.swing.JButton();
        swap_day_two_combobox = new javax.swing.JComboBox();
        swap_day_one_combobox = new javax.swing.JComboBox();
        change_meal_combobox = new javax.swing.JComboBox();
        meal_combobox = new javax.swing.JComboBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        menu_table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"Monday", null},
                {"Tuesday", null},
                {"Wednesday", null},
                {"Thursday", null},
                {"Friday", null},
                {"Saturday", null},
                {"Sunday", null}
            },
            new String [] {
                "Day", "Meal"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        menu_table.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(menu_table);
        if (menu_table.getColumnModel().getColumnCount() > 0) {
            menu_table.getColumnModel().getColumn(0).setResizable(false);
            menu_table.getColumnModel().getColumn(1).setResizable(false);
        }

        new_menu_button.setText("Generate New Menu");
        new_menu_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                new_menu_buttonActionPerformed(evt);
            }
        });

        swap_days_button.setText("Swap Two Days");
        swap_days_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                swap_days_buttonActionPerformed(evt);
            }
        });

        change_one_meal_button.setText("Set One Day");
        change_one_meal_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                change_one_meal_buttonActionPerformed(evt);
            }
        });

        email_ingredients_button.setText("Email Ingredients");
        email_ingredients_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                email_ingredients_buttonActionPerformed(evt);
            }
        });

        ingredients_list.setEditable(false);
        ingredients_list.setColumns(20);
        ingredients_list.setRows(5);
        jScrollPane2.setViewportView(ingredients_list);

        ingredients_label.setText("Ingredients:");

        main_menu_button.setText("Main Menu");
        main_menu_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                main_menu_buttonActionPerformed(evt);
            }
        });

        view_as_list_button.setText("View as list");
        view_as_list_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                view_as_list_buttonActionPerformed(evt);
            }
        });

        view_as_meals_button.setText("View as meals");
        view_as_meals_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                view_as_meals_buttonActionPerformed(evt);
            }
        });

        swap_day_two_combobox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday" }));

        swap_day_one_combobox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday" }));

        change_meal_combobox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday" }));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(email_ingredients_button)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(main_menu_button))
                    .addComponent(new_menu_button, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 422, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(change_meal_combobox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(meal_combobox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(swap_days_button, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(swap_day_one_combobox, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(swap_day_two_combobox, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(change_one_meal_button, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(ingredients_label)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(view_as_list_button)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 139, Short.MAX_VALUE)
                        .addComponent(view_as_meals_button)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(ingredients_label)
                            .addComponent(view_as_list_button)
                            .addComponent(view_as_meals_button))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(new_menu_button)
                        .addGap(15, 15, 15)
                        .addComponent(swap_days_button)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(swap_day_one_combobox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(swap_day_two_combobox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(change_one_meal_button)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(change_meal_combobox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(meal_combobox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 22, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(email_ingredients_button)
                            .addComponent(main_menu_button))))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void view_as_list_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_view_as_list_buttonActionPerformed
        //Update ingredient list
        update_ingredient_list();
    }//GEN-LAST:event_view_as_list_buttonActionPerformed

    private void view_as_meals_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_view_as_meals_buttonActionPerformed
        //Update menu display and ingredient list
        String ingredient_string_list = "";
        for (int i = 0; i < 7; i++) {
            if(week.get(i).meal.ingredients.isEmpty()) {
                //Don't write meals with no ingredients
                continue;
            }
            ingredient_string_list += week.get(i).meal.name + ":\n";
            for (int k = 0; k < week.get(i).meal.ingredients.size(); k++) {
                String new_ingredient_line = " ";
                if (week.get(i).meal.ingredients.get(k).is_frac()) {
                    if (week.get(i).meal.ingredients.get(k).get_frac_quantity() != null) {
                        new_ingredient_line += week.get(i).meal.ingredients.get(k).get_frac_quantity().toString() + " ";
                    }
                } else {
                    new_ingredient_line += week.get(i).meal.ingredients.get(k).get_dec_quantity() + " ";
                }
                if (!week.get(i).meal.ingredients.get(k).get_measurement().isEmpty()) {
                    new_ingredient_line += week.get(i).meal.ingredients.get(k).get_measurement() + " ";
                }
                if (!week.get(i).meal.ingredients.get(k).get_name().isEmpty()) {
                    new_ingredient_line += week.get(i).meal.ingredients.get(k).get_name() + " ";
                }
                ingredient_string_list += new_ingredient_line + "\n";
            }
        }
        ingredients_list.setText(ingredient_string_list);
    }//GEN-LAST:event_view_as_meals_buttonActionPerformed

    private void new_menu_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_new_menu_buttonActionPerformed
        //Need to perform DEEP COPY on menu and ingredients_to_use
        this.menu = new ArrayList<>();
        this.menu.addAll(this.backup_menu);
        this.ingredients_to_use = new ArrayList<>();
        if (this.backup_ingredients_to_use != null) {
            this.ingredients_to_use.addAll(this.backup_ingredients_to_use);
        }
        this.weekly_ingredients = new ArrayList<>();
        this.ingredients_menu = new ArrayList<>();
        this.week = new ArrayList<>();
        
        generate_menu();
    }//GEN-LAST:event_new_menu_buttonActionPerformed

    private void swap_days_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_swap_days_buttonActionPerformed
        Day swap_day = this.week.get(swap_day_one_combobox.getSelectedIndex());
        this.week.set(swap_day_one_combobox.getSelectedIndex(), this.week.get(swap_day_two_combobox.getSelectedIndex()));
        this.week.set(swap_day_two_combobox.getSelectedIndex(), swap_day);
        
        //Update menu display
        for (int i = 0; i < 7; i++) {
            menu_table.setValueAt(week.get(i).meal.name, i, 1);
        }
        
        //Update ingredient list
        update_ingredient_list();
    }//GEN-LAST:event_swap_days_buttonActionPerformed

    private void change_one_meal_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_change_one_meal_buttonActionPerformed
        //Grab temporary copies of the day and meal, merge them, and replace the existing day with the
        //new merged version
        Meal temp_meal = backup_menu.get(meal_combobox.getSelectedIndex());
        Day temp_day = week.get(change_meal_combobox.getSelectedIndex());
        temp_day.set_meal(temp_meal);
        week.set(change_meal_combobox.getSelectedIndex(), temp_day);
        
        //Update menu display and ingredient list
        weekly_ingredients.clear();
        for (int i = 0; i < 7; i++) {
            menu_table.setValueAt(week.get(i).meal.name, i, 1);
            for (int k = 0; k < week.get(i).meal.ingredients.size(); k++) {
                weekly_ingredients.add(week.get(i).meal.ingredients.get(k));
            }
        }
        
        //Custom sorting for Ingredient objects
        Collections.sort(weekly_ingredients, (Ingredient ingredient1, Ingredient ingredient2) -> ingredient1.get_name().compareTo(ingredient2.get_name()));

        //Add together like ingredients
        combine_ingredients();
        
        //Update ingredient list
        update_ingredient_list();
    }//GEN-LAST:event_change_one_meal_buttonActionPerformed

    private void main_menu_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_main_menu_buttonActionPerformed
        dispose();
        InitialMenu next_window = null;
        try {
            next_window = new InitialMenu();
        } catch (IOException ex) {
            Logger.getLogger(AddMeal.class.getName()).log(Level.SEVERE, null, ex);
        }
        //If unable to open main menu, exit
        if(next_window == null)
        {
            JOptionPane.showMessageDialog(popup, "Fatal error. Exiting...");
            System.exit(1);
        }
        
        next_window.setVisible(true);
    }//GEN-LAST:event_main_menu_buttonActionPerformed

    private void email_ingredients_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_email_ingredients_buttonActionPerformed
        //Check if emails have been entered
        if(settings.get_emails().isEmpty()) {
            JOptionPane.showMessageDialog(popup, "No emails have been entered");
            return;
        }

        //Create shopping list string
        String shopping_list = "";
        for (int i = 0; i < weekly_ingredients.size(); i++) {
            String new_ingredient_line = "";
            if (weekly_ingredients.get(i).is_frac()) {
                if (weekly_ingredients.get(i).get_frac_quantity() != null) {
                    new_ingredient_line += weekly_ingredients.get(i).get_frac_quantity().toString() + " ";
                }
            } else {
                new_ingredient_line += weekly_ingredients.get(i).get_dec_quantity() + " ";
            }
            if (!weekly_ingredients.get(i).get_measurement().isEmpty()) {
                new_ingredient_line += weekly_ingredients.get(i).get_measurement() + " ";
            }
            if (!weekly_ingredients.get(i).get_name().isEmpty()) {
                new_ingredient_line += weekly_ingredients.get(i).get_name() + " ";
            }
            shopping_list += new_ingredient_line + "\n";
        }
        
        //New email object
        Email email = new Email(settings, shopping_list);
        
        //Create the shopping list file for attachment
        try {
            email.create_shopping_list_file();
        } catch (FileNotFoundException | UnsupportedEncodingException ex) {
            Logger.getLogger(MenuGeneration.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        //Send the email!
        email.send_email();
    }//GEN-LAST:event_email_ingredients_buttonActionPerformed

    
    //**MENU GENERATION**//
    //Shuffle Menu
    //Generate list of unused meals > Generate ingredients_to_use meal
    //Generate lmh for each day - create day object and arraylist of days called week
    //Fill in special meals
    //Fill in fast sunday meal
    //fill in according to lmh
    //All of the above follow meal pattern ingredient>unused>used

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox change_meal_combobox;
    private javax.swing.JButton change_one_meal_button;
    private javax.swing.JButton email_ingredients_button;
    private javax.swing.JLabel ingredients_label;
    private javax.swing.JTextArea ingredients_list;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton main_menu_button;
    private javax.swing.JComboBox meal_combobox;
    private javax.swing.JTable menu_table;
    private javax.swing.JButton new_menu_button;
    private javax.swing.JComboBox swap_day_one_combobox;
    private javax.swing.JComboBox swap_day_two_combobox;
    private javax.swing.JButton swap_days_button;
    private javax.swing.JButton view_as_list_button;
    private javax.swing.JButton view_as_meals_button;
    // End of variables declaration//GEN-END:variables
    private Settings settings;
    private ArrayList<Meal> menu;
    private ArrayList<Meal> backup_menu;
    private ArrayList<Meal> ingredients_menu;
    private ArrayList<Day> week;
    private boolean[] eatout_meals;
    private boolean[] quick_meals;
    private boolean[] special_meals;
    private boolean[] large_meals;
    private boolean fast_sunday;
    private ArrayList<String> ingredients_to_use;
    private ArrayList<String> backup_ingredients_to_use;
    private ArrayList<Ingredient> weekly_ingredients;
    private boolean combine_quick_meals;
    private boolean combine_special_meals;
    private boolean combine_large_meals;
    private boolean combine_fast_sunday_meals;
    
    public void generate_menu() {
        //Shuffle the menu
        Collections.shuffle(menu,new Random(System.nanoTime()));
        
        //Create list of meals that contain onhand ingredients_to_use
        if (ingredients_to_use != null) {
            ingredient_to_use_loop:
            for (String ingredient_to_use : ingredients_to_use) {
                String exact_word_match_regex = "\\b" + ingredient_to_use.toLowerCase() + "\\b";
                Pattern p = Pattern.compile(exact_word_match_regex);
                
                menu_loop:
                for (int i = 0; i < menu.size(); i++) {
                    menu_ingredient_loop:
                    for (int j = 0; j < menu.get(i).ingredients.size(); j++) {
                        Matcher m = p.matcher(menu.get(i).ingredients.get(j).get_name().toLowerCase());
                        if (m.find()) {
                            //If meal matches ingredient, move it to other meal list
                            ingredients_menu.add(menu.get(i));
                            menu.remove(i);
                            continue ingredient_to_use_loop; //Continue onto next ingredient_to_use
                        }
                    }
                }
            }
        } else {
            //Create empty ingredients_to_use list
            ingredients_to_use = new ArrayList<>();
        }
        
        //Creating week
        week.add(new Day("Monday"));
        week.add(new Day("Tuesday"));
        week.add(new Day("Wednesday"));
        week.add(new Day("Thursday"));
        week.add(new Day("Friday"));
        week.add(new Day("Saturday"));
        week.add(new Day("Sunday"));
        
        //Select meals for each day, starting with Sunday
        Meal[] week_meals = new Meal[7];
        for(int i = 0; i < 6; i++) {
            week_meals[i] = find_meal(eatout_meals[i],large_meals[i],false,special_meals[i],quick_meals[i],week.get(i).lmh,week.get(i).name);
        }
        week_meals[6] = find_meal(eatout_meals[6],large_meals[6],fast_sunday,special_meals[6],quick_meals[6],week.get(6).lmh,week.get(6).name);
        
        //Updates days to include selected meals
        for (int i = 0; i < 7; i++) {
            Day temp_day = week.get(i);
            temp_day.meal = week_meals[i];
            week.set(i, temp_day);
        }

        //Update menu display and ingredient list
        for (int i = 0; i < 7; i++) {
            menu_table.setValueAt(week.get(i).meal.name, i, 1);
            for (int k = 0; k < week.get(i).meal.ingredients.size(); k++) {
                weekly_ingredients.add(week.get(i).meal.ingredients.get(k));
            }
        }
        
        //Custom sorting for Ingredient objects
        Collections.sort(weekly_ingredients, (Ingredient ingredient1, Ingredient ingredient2) -> ingredient1.get_name().compareTo(ingredient2.get_name()));

        //Add together like ingredients
        combine_ingredients();
        
        //Update ingredient list
        update_ingredient_list();
        
    }
    
    public void update_ingredient_list() {
        String ingredient_string_list = "";
        for (int i = 0; i < weekly_ingredients.size(); i++) {
            String new_ingredient_line = "";
            if (weekly_ingredients.get(i).is_frac()) {
                if (weekly_ingredients.get(i).get_frac_quantity() != null) {
                    new_ingredient_line += weekly_ingredients.get(i).get_frac_quantity().toString() + " ";
                }
            } else {
                new_ingredient_line += weekly_ingredients.get(i).get_dec_quantity() + " ";
            }
            if (!weekly_ingredients.get(i).get_measurement().isEmpty()) {
                new_ingredient_line += weekly_ingredients.get(i).get_measurement() + " ";
            }
            if (!weekly_ingredients.get(i).get_name().isEmpty()) {
                new_ingredient_line += weekly_ingredients.get(i).get_name() + " ";
            }
            ingredient_string_list += new_ingredient_line + "\n";
        }
        ingredients_list.setText(ingredient_string_list);
    }
    
    //Creates a weekly ingredients list that adds together any duplicate ingredeints
    //Modifies global variable weekly_ingredients
    public void combine_ingredients() {
        if (!weekly_ingredients.isEmpty()) {
            ArrayList<Ingredient> temp_weekly_ingredients = new ArrayList<>();
            for(int i = 0; i < weekly_ingredients.size(); i++) {
                //Loop through ingredients to check for duplicates
                boolean found_matching_ingredient = false;
                for (int k = 0; k < temp_weekly_ingredients.size(); k++) {
                    if (temp_weekly_ingredients.get(k).get_name().equals(weekly_ingredients.get(i).get_name())) {
                        //Check to make sure they are using the same type of measurement
                        if(!temp_weekly_ingredients.get(k).get_measurement().equals(weekly_ingredients.get(i).get_measurement())) {
                            break;
                        }
                        //Check to see if both are fractions or decimals
                        if (weekly_ingredients.get(i).is_frac() && !temp_weekly_ingredients.get(k).is_frac()) {
                            //Found mismatch with same name, will add it to the new list seperately
                            break;
                        } else if(!weekly_ingredients.get(i).is_frac() && temp_weekly_ingredients.get(k).is_frac()) {
                            break;
                        } else if(weekly_ingredients.get(i).is_frac()) {
                            //If there is no quantity, don't try to perform addition
                            if(weekly_ingredients.get(i).get_frac_quantity() == null ||
                                    temp_weekly_ingredients.get(k).get_frac_quantity() == null) {
                                found_matching_ingredient = true;
                                break;
                            }
                            //Add together two Fractions!
                            Ingredient temp_ingredient = temp_weekly_ingredients.get(k);
                            Fraction frac1 = weekly_ingredients.get(i).get_frac_quantity();
                            Fraction frac2 = temp_weekly_ingredients.get(k).get_frac_quantity();
                            Fraction final_frac = frac1.add(frac2);
                            temp_ingredient.set_quantity(final_frac);
                            temp_weekly_ingredients.set(k, temp_ingredient);
                            found_matching_ingredient = true;
                            break;
                        } else if(!weekly_ingredients.get(i).is_frac()) {
                            //Add together two Decimals!
                            Ingredient temp_ingredient = temp_weekly_ingredients.get(k);
                            double val1 = weekly_ingredients.get(i).get_dec_quantity();
                            double val2 = temp_weekly_ingredients.get(k).get_dec_quantity();
                            double final_val = val1 + val2;
                            temp_ingredient.set_quantity(final_val);
                            temp_weekly_ingredients.set(k, temp_ingredient);
                            found_matching_ingredient = true;
                            break;
                        }
                    }
                }
                if(!found_matching_ingredient) {
                    //Avoid direct assignment, which would perform shallow copy
                    Ingredient temp_ingredient = new Ingredient();
                    if(weekly_ingredients.get(i).is_frac()) {
                        temp_ingredient.set_quantity(weekly_ingredients.get(i).get_frac_quantity());
                    } else {
                        temp_ingredient.set_quantity(weekly_ingredients.get(i).get_dec_quantity());
                    }
                    temp_ingredient.set_measurement(weekly_ingredients.get(i).get_measurement());
                    temp_ingredient.set_name(weekly_ingredients.get(i).get_name());
                    temp_weekly_ingredients.add(temp_ingredient);
                }
            }
            this.weekly_ingredients = temp_weekly_ingredients;
        } 
    }
    
    
    //Returns a meal based on preferences. Priority:
    //Eatout, Fast Sunday, Special Meal, Quick Meal, LMH
    //Each time we find a meal, we check the menu of onhand ingredients_to_use first, and then check other meals
    public Meal find_meal(boolean eatout, boolean large_meal, boolean fast_sunday, boolean special_meal, boolean quick_meal, int lmh, String day) {
        
        if(eatout) {
            Meal eating_out = new Meal();
            eating_out.name = "Eating out!";
            eating_out.recipe = "";
            eating_out.ingredients = new ArrayList<>();
            return eating_out;
        }
        
        //Attempt to find meal that matches 100%, including LMH
        for (int i = 0; i < ingredients_menu.size(); i++) {
            Meal curr_meal = ingredients_menu.get(i);
            if ((curr_meal.large_meal == large_meal || combine_large_meals) && (curr_meal.fast_sunday == fast_sunday || combine_fast_sunday_meals) && ((curr_meal.frequency == 0) == special_meal || combine_special_meals) && (curr_meal.quick_meal == quick_meal || combine_quick_meals) && curr_meal.frequency == lmh) {
                ingredients_menu.remove(i);
                return curr_meal;
            }
        }
        for (int i = 0; i < menu.size(); i++) {
            Meal curr_meal = menu.get(i);
            if ((curr_meal.large_meal == large_meal || combine_large_meals) && (curr_meal.fast_sunday == fast_sunday || combine_fast_sunday_meals) && ((curr_meal.frequency == 0) == special_meal || combine_special_meals) && (curr_meal.quick_meal == quick_meal || combine_quick_meals) && curr_meal.frequency == lmh) {
                menu.remove(i);
                return curr_meal;
            }
        }
        
        //Attempt to find meal that matches, except LMH
        for (int i = 0; i < ingredients_menu.size(); i++) {
            Meal curr_meal = ingredients_menu.get(i);
            if ((curr_meal.large_meal == large_meal || combine_large_meals) && (curr_meal.fast_sunday == fast_sunday || combine_fast_sunday_meals) && ((curr_meal.frequency == 0) == special_meal || combine_special_meals) && (curr_meal.quick_meal == quick_meal || combine_quick_meals)) {
                ingredients_menu.remove(i);
                return curr_meal;
            }
        }
        for (int i = 0; i < menu.size(); i++) {
            Meal curr_meal = menu.get(i);
            if ((curr_meal.large_meal == large_meal || combine_large_meals) && (curr_meal.fast_sunday == fast_sunday || combine_fast_sunday_meals) && ((curr_meal.frequency == 0) == special_meal || combine_special_meals) && (curr_meal.quick_meal == quick_meal || combine_quick_meals)) {
                menu.remove(i);
                return curr_meal;
            }
        }
        
        JOptionPane.showMessageDialog(popup, "Unable to find meal for " + day
                + " that matches up 100%  with given criteria.\nUsing best alternative meal...");
        
        //If its fast Sunday, find fast sunday meal that also matches on special meal
        if(fast_sunday) {
            for(int i = 0; i < ingredients_menu.size(); i++) {
                Meal curr_meal = ingredients_menu.get(i);
                if(curr_meal.fast_sunday && (curr_meal.frequency == 0) == special_meal) {
                    ingredients_menu.remove(i);
                    return curr_meal;
                }
            }
            for(int i = 0; i < menu.size(); i++) {
                Meal curr_meal = menu.get(i);
                if(curr_meal.fast_sunday && (curr_meal.frequency == 0) == special_meal) {
                    menu.remove(i);
                    return curr_meal;
                }
            }
        }
        
        //If its special meal, find special meal that also matches on fast sunday
        if(special_meal) {
            for(int i = 0; i < ingredients_menu.size(); i++) {
                Meal curr_meal = ingredients_menu.get(i);
                if(curr_meal.frequency == 0 && curr_meal.fast_sunday == fast_sunday) {
                    ingredients_menu.remove(i);
                    return curr_meal;
                }
            }
            for(int i = 0; i < menu.size(); i++) {
                Meal curr_meal = menu.get(i);
                if(curr_meal.frequency == 0 && curr_meal.fast_sunday == fast_sunday) {
                    menu.remove(i);
                    return curr_meal;
                }
            }
        }
        
        //If its a quick meal, finds quick meal that also matches on fast sunday and special meal
        if(quick_meal) {
            for(int i = 0; i < ingredients_menu.size(); i++) {
                Meal curr_meal = ingredients_menu.get(i);
                if(curr_meal.quick_meal && (curr_meal.frequency == 0) == special_meal && curr_meal.fast_sunday == fast_sunday) {
                    ingredients_menu.remove(i);
                    return curr_meal;
                }
            }
            for(int i = 0; i < menu.size(); i++) {
                Meal curr_meal = menu.get(i);
                if(curr_meal.quick_meal && (curr_meal.frequency == 0) == special_meal && curr_meal.fast_sunday == fast_sunday) {
                    menu.remove(i);
                    return curr_meal;
                }
            }
        }
        
        //Finds any meal that matches on lmh
        for (int i = 0; i < ingredients_menu.size(); i++) {
            Meal curr_meal = ingredients_menu.get(i);
            if (curr_meal.frequency == lmh) {
                ingredients_menu.remove(i);
                return curr_meal;
            }
        }
        for (int i = 0; i < menu.size(); i++) {
            Meal curr_meal = menu.get(i);
            if (curr_meal.frequency == lmh) {
                menu.remove(i);
                return curr_meal;
            }
        }
        
        //Finds any meal that is 'most' frequent
        for (int i = 0; i < ingredients_menu.size(); i++) {
            Meal curr_meal = ingredients_menu.get(i);
            if (curr_meal.frequency == 3) {
                ingredients_menu.remove(i);
                return curr_meal;
            }
        }
        for (int i = 0; i < menu.size(); i++) {
            Meal curr_meal = menu.get(i);
            if (curr_meal.frequency == 3) {
                menu.remove(i);
                return curr_meal;
            }
        }
        
        //Finds any meal that is 'normal' frequent
        for (int i = 0; i < ingredients_menu.size(); i++) {
            Meal curr_meal = ingredients_menu.get(i);
            if (curr_meal.frequency == 2) {
                ingredients_menu.remove(i);
                return curr_meal;
            }
        }
        for (int i = 0; i < menu.size(); i++) {
            Meal curr_meal = menu.get(i);
            if (curr_meal.frequency == 2) {
                menu.remove(i);
                return curr_meal;
            }
        }
        
        //Finds any meal that is 'not' frequent
        for (int i = 0; i < ingredients_menu.size(); i++) {
            Meal curr_meal = ingredients_menu.get(i);
            if (curr_meal.frequency == 1) {
                ingredients_menu.remove(i);
                return curr_meal;
            }
        }
        for (int i = 0; i < menu.size(); i++) {
            Meal curr_meal = menu.get(i);
            if (curr_meal.frequency == 1) {
                menu.remove(i);
                return curr_meal;
            }
        }
        
        //Last case - Finds any unused 'special' meal
        for (int i = 0; i < ingredients_menu.size(); i++) {
            Meal curr_meal = ingredients_menu.get(i);
            if (curr_meal.frequency == 0) {
                ingredients_menu.remove(i);
                return curr_meal;
            }
        }
        for (int i = 0; i < menu.size(); i++) {
            Meal curr_meal = menu.get(i);
            if (curr_meal.frequency == 0) {
                menu.remove(i);
                return curr_meal;
            }
        }
        JOptionPane.showMessageDialog(popup, "ERROR: No meal found for " + day);
        return null;
        
    }
}
