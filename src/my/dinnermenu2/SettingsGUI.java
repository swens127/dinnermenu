/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package my.dinnermenu2;

import java.awt.Component;
import java.awt.Dimension;
import java.awt.Image;
import java.awt.Toolkit;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;

/**
 *
 * @author ajswe
 */
public class SettingsGUI extends javax.swing.JFrame {

    private static Component popup;
    /**
     * Creates new form Settings
     * @param settings
     */
    public SettingsGUI(Settings settings) {
        this.settings = settings;
        setDefaultCloseOperation(SettingsGUI.EXIT_ON_CLOSE);
        try {
            Image image = new ImageIcon("icon.png").getImage();
            this.setIconImage(image);
        } catch(Exception ex){
            JOptionPane.showMessageDialog(popup, "Application icon not found!");
        }
        initComponents();
        this.setTitle("Settings");
        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
        this.setLocation(dim.width/2-this.getSize().width/2, dim.height/2-this.getSize().height/2);
        setResizable(false);
        
        //Initialize components
        unsol_quick_meal_checkbox.setSelected(settings.get_unsol_quick());
        unsol_special_meal_checkbox.setSelected(settings.get_unsol_special());
        unsol_large_meal_checkbox.setSelected(settings.get_unsol_large());
        unsol_fast_sunday_checkbox.setSelected(settings.get_unsol_fast_sunday());
        arraylist_to_combobox(settings.get_emails());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        email_combobox = new javax.swing.JComboBox();
        email_label = new javax.swing.JLabel();
        remove_email_button = new javax.swing.JButton();
        add_email_button = new javax.swing.JButton();
        back_button = new javax.swing.JButton();
        save_button = new javax.swing.JButton();
        new_email_text = new javax.swing.JTextField();
        new_email_label = new javax.swing.JLabel();
        unsol_quick_meal_checkbox = new javax.swing.JCheckBox();
        unsol_special_meal_checkbox = new javax.swing.JCheckBox();
        unsol_large_meal_checkbox = new javax.swing.JCheckBox();
        unsol_fast_sunday_checkbox = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        email_combobox.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        email_label.setText("Email List");

        remove_email_button.setText("Remove Email");
        remove_email_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                remove_email_buttonActionPerformed(evt);
            }
        });

        add_email_button.setText("Add Email");
        add_email_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                add_email_buttonActionPerformed(evt);
            }
        });

        back_button.setText("Back");
        back_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                back_buttonActionPerformed(evt);
            }
        });

        save_button.setText("Save");
        save_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                save_buttonActionPerformed(evt);
            }
        });

        new_email_label.setText(" Email:");

        unsol_quick_meal_checkbox.setText("Allow unsolicited quick meals");

        unsol_special_meal_checkbox.setText("Allow unsolicited special meals");

        unsol_large_meal_checkbox.setText("Allow unsolicited large meals");

        unsol_fast_sunday_checkbox.setText("Allow unsolicited fast Sunday meals");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(back_button)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(save_button))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(add_email_button)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(remove_email_button))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(unsol_quick_meal_checkbox)
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(email_label)
                                        .addComponent(new_email_label))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(new_email_text)
                                        .addComponent(email_combobox, 0, 177, Short.MAX_VALUE)))
                                .addComponent(unsol_large_meal_checkbox)
                                .addComponent(unsol_special_meal_checkbox)
                                .addComponent(unsol_fast_sunday_checkbox)))
                        .addGap(0, 2, Short.MAX_VALUE)))
                .addContainerGap(13, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(email_combobox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(email_label))
                .addGap(4, 4, 4)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(new_email_text, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(new_email_label))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(add_email_button)
                    .addComponent(remove_email_button))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(unsol_quick_meal_checkbox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(unsol_special_meal_checkbox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(unsol_large_meal_checkbox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(unsol_fast_sunday_checkbox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 47, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(back_button)
                    .addComponent(save_button))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void back_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_back_buttonActionPerformed
        dispose();
        InitialMenu next_window;
        try {
            next_window = new InitialMenu();
            next_window.setVisible(true);
        } catch (IOException ex) {
            Logger.getLogger(MenuConfig.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_back_buttonActionPerformed

    private void save_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_save_buttonActionPerformed
        try (PrintWriter writer = new PrintWriter("settings")) {
            //Emails
            ArrayList<String> emails = new ArrayList<>();
            String formatted_emails = "";
            for (int i = 0; i < email_combobox.getItemCount(); i++) {
                formatted_emails += email_combobox.getItemAt(i).toString();
                if (i < (email_combobox.getItemCount()-1)) {
                    formatted_emails += ",";
                }
                emails.add(email_combobox.getItemAt(i).toString());
            }
            settings.set_emails(emails);
            writer.println(formatted_emails);
            
            //Unsolicited quick meals
            settings.set_unsol_quick(unsol_quick_meal_checkbox.isSelected());
            writer.println(unsol_quick_meal_checkbox.isSelected());
            
            //Unsolicited special meals
            settings.set_unsol_special(unsol_special_meal_checkbox.isSelected());
            writer.println(unsol_special_meal_checkbox.isSelected());
            
            //Unsolicited large meals
            settings.set_unsol_large(unsol_large_meal_checkbox.isSelected());
            writer.println(unsol_large_meal_checkbox.isSelected());
            
            //Unsolicited fast sunday meals
            settings.set_unsol_fast_sunday(unsol_fast_sunday_checkbox.isSelected());
            writer.println(unsol_fast_sunday_checkbox.isSelected());
            
            //End sequence
            writer.println("*&*&*");            
            writer.flush();
            JOptionPane.showMessageDialog(popup, "Saved!");
            
            //Go back to main menu
            dispose();
            InitialMenu next_window;
            try {
                next_window = new InitialMenu();
                next_window.setVisible(true);
            } catch (IOException ex) {
                Logger.getLogger(MenuConfig.class.getName()).log(Level.SEVERE, null, ex);
            }
        } catch (FileNotFoundException ex) {
            Logger.getLogger(SettingsGUI.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(popup, "Failed to save!");
        }
    }//GEN-LAST:event_save_buttonActionPerformed

    private void add_email_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_add_email_buttonActionPerformed
        if(new_email_text.getText().isEmpty()) {
            return;
        }
        ArrayList<String> emails = settings.get_emails();
        emails.add(new_email_text.getText());
        settings.set_emails(emails);
        arraylist_to_combobox(emails);
        email_combobox.setSelectedItem(new_email_text.getText());
    }//GEN-LAST:event_add_email_buttonActionPerformed

    private void remove_email_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_remove_email_buttonActionPerformed
        ArrayList<String> emails = settings.get_emails();
        if(emails.remove(new_email_text.getText())) {
            JOptionPane.showMessageDialog(popup, new_email_text.getText() + " removed!");
            new_email_text.setText("");
        }
        else if (new_email_text.getText().equals("") && emails.remove((String)email_combobox.getSelectedItem())){
            JOptionPane.showMessageDialog(popup, (String)email_combobox.getSelectedItem() + " removed!");
            new_email_text.setText("");
        } else {
            JOptionPane.showMessageDialog(popup,"Unable to remove email!");
            return;
        }
        settings.set_emails(emails);
        arraylist_to_combobox(emails);
        email_combobox.setSelectedItem(new_email_text.getText());
    }//GEN-LAST:event_remove_email_buttonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton add_email_button;
    private javax.swing.JButton back_button;
    private javax.swing.JComboBox email_combobox;
    private javax.swing.JLabel email_label;
    private javax.swing.JLabel new_email_label;
    private javax.swing.JTextField new_email_text;
    private javax.swing.JButton remove_email_button;
    private javax.swing.JButton save_button;
    private javax.swing.JCheckBox unsol_fast_sunday_checkbox;
    private javax.swing.JCheckBox unsol_large_meal_checkbox;
    private javax.swing.JCheckBox unsol_quick_meal_checkbox;
    private javax.swing.JCheckBox unsol_special_meal_checkbox;
    // End of variables declaration//GEN-END:variables
    private Settings settings;
    
    private void arraylist_to_combobox(ArrayList<String> emails) {
        email_combobox.removeAllItems();
        for (int i = 0; i < emails.size(); i++) {
            email_combobox.addItem(emails.get(i));
        }
    }
}
